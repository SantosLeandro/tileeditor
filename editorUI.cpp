// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include "editorUI.h"

void EditorUI::cb_menuOpen_i(Fl_Menu_*, void*) {
  //open file
  char *newfile = fl_file_chooser("Open File?", "*.json", filename);
  if(editorView->level){
    delete editorView->level;
  }
  editorView->level = LoadLevel(newfile);
  editorView->redraw();
  TileSelector::tileSize = editorView->level->tileSize;
  tilesetUI->load_image("tileset_1616.png");
  BrowserLayer->clear();
  for(int i=0; i < editorView->level->layer.size();i++) {
    BrowserLayer->add(editorView->level->layer[i].name.c_str());
  }
  BrowserLayer->add("foreground");
}
void EditorUI::cb_menuOpen(Fl_Menu_* o, void* v) {
  ((EditorUI*)(o->parent()->user_data()))->cb_menuOpen_i(o,v);
}

void EditorUI::cb_menuSave_i(Fl_Menu_*, void*) {
  SaveLevel(editorView->level,"backup.json");
}
void EditorUI::cb_menuSave(Fl_Menu_* o, void* v) {
  ((EditorUI*)(o->parent()->user_data()))->cb_menuSave_i(o,v);
}

void EditorUI::cb_menuSaveAs_i(Fl_Menu_*, void*) {
  //save as;
}
void EditorUI::cb_menuSaveAs(Fl_Menu_* o, void* v) {
  ((EditorUI*)(o->parent()->user_data()))->cb_menuSaveAs_i(o,v);
}

Fl_Menu_Item EditorUI::menu_[] = {
 {"File", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"New", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Open", 0,  (Fl_Callback*)EditorUI::cb_menuOpen, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Save", 0,  (Fl_Callback*)EditorUI::cb_menuSave, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Save As", 0,  (Fl_Callback*)EditorUI::cb_menuSaveAs, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* EditorUI::menuNew = EditorUI::menu_ + 1;
Fl_Menu_Item* EditorUI::menuOpen = EditorUI::menu_ + 2;
Fl_Menu_Item* EditorUI::menuSave = EditorUI::menu_ + 3;
Fl_Menu_Item* EditorUI::menuSaveAs = EditorUI::menu_ + 4;

EditorUI::EditorUI() {
  { mainWindow = new Fl_Window(1165, 780);
    mainWindow->user_data((void*)(this));
    { editorView = new EditorView(320, 25, 845, 860, "EditorView");
      editorView->box(FL_UP_BOX);
      editorView->color(FL_BACKGROUND_COLOR);
      editorView->selection_color(FL_BACKGROUND_COLOR);
      editorView->labeltype(FL_NORMAL_LABEL);
      editorView->labelfont(0);
      editorView->labelsize(14);
      editorView->labelcolor(FL_FOREGROUND_COLOR);
      editorView->align(Fl_Align(FL_ALIGN_CENTER));
      editorView->when(FL_WHEN_RELEASE);
    } // EditorView* editorView
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 1165, 25);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { Fl_Group* o = new Fl_Group(-10, 25, 340, 770);
      { Fl_Tabs* o = new Fl_Tabs(0, 215, 320, 580);
        { Fl_Group* o = new Fl_Group(0, 235, 320, 560, "Tileset");
          o->box(FL_GLEAM_DOWN_FRAME);
          { tilesetUI = new TilesetUI(5, 246, 305, 304);
            tilesetUI->box(FL_NO_BOX);
            tilesetUI->color((Fl_Color)44);
            tilesetUI->selection_color(FL_DARK2);
            tilesetUI->labeltype(FL_NORMAL_LABEL);
            tilesetUI->labelfont(0);
            tilesetUI->labelsize(14);
            tilesetUI->labelcolor(FL_FOREGROUND_COLOR);
            tilesetUI->align(Fl_Align(581));
            tilesetUI->when(FL_WHEN_RELEASE);
          } // TilesetUI* tilesetUI
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(10, 235, 310, 560, "GameObjects");
          o->hide();
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Tabs* o
      { BrowserLayer = new Fl_Browser(5, 30, 310, 175);
        BrowserLayer->type(2);
      } // Fl_Browser* BrowserLayer
      o->end();
    } // Fl_Group* o
    Fl::scheme("plastic");
    mainWindow->end();
    mainWindow->resizable(mainWindow);
  } // Fl_Window* mainWindow
}

void EditorUI::show(int argc, char **argv) {
  mainWindow->show(argc,argv);
}

void EditorUI::loadTileset(const char* file) {
  if (file != NULL) {
          Fl_Image *img = nullptr;
  
          // Determine the file extension and load the image accordingly
          std::string filename = file;
          if (filename.find(".bmp") != std::string::npos) {
              img = new Fl_BMP_Image(file);  // Load BMP image
          } else if (filename.find(".png") != std::string::npos) {
              img = new Fl_PNG_Image(file);  // Load PNG image
          } else if (filename.find(".jpg") != std::string::npos || filename.find(".jpeg") != std::string::npos) {
              img = new Fl_JPEG_Image(file); // Load JPEG image
          }
  
          // Check if the image is valid and set it to the box
          if (img && img->w() > 0 && img->h() > 0) {
              tilesetUI->image(img);               // Set the image in the box
              tilesetUI->redraw();                 // Redraw the box to show the image
          } else {
              delete img;                    // Clean up if the image was invalid
              fl_alert("Invalid Image file!");
          }
      }
}
