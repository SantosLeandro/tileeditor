# data file for the Fltk User Interface Designer (fluid)
version 1.0308
header_name {.h}
code_name {.cpp}
decl {\#include <FL/Fl_File_Chooser.H>} {public global
}

decl {\#include "level.h"} {public global
}

decl {\#include "loader.h"} {public global
}

decl {\#include <FL/Fl_BMP_Image.H>} {public global
}

decl {\#include <FL/Fl_PNG_Image.H>} {public global
}

decl {\#include <FL/Fl_JPEG_Image.H>} {public global
}

decl {\#include "global.h"} {public global
}

class EditorUI {open
} {
  Function {EditorUI()} {open
  } {
    Fl_Window mainWindow {
      label LevelEditor open
      xywh {379 240 1280 720} type Single resizable
      code0 {Fl::scheme("plastic");} visible
    } {
      Fl_Box editorView {
        label EditorView
        xywh {320 25 960 695} box UP_BOX
        code0 {\#include "editor.h"}
        class EditorView
      }
      Fl_Menu_Bar {} {open
        xywh {0 0 1280 25}
      } {
        Submenu {} {
          label File open
          xywh {0 0 100 20}
        } {
          MenuItem menuNew {
            label New
            xywh {0 0 100 20}
          }
          MenuItem menuOpen {
            label Open
            callback {//open file
  char *newfile = fl_file_chooser("Open File?", "*.json", filename);
  if(newfile == nullptr){
    return;
  }
  if(editorView->level){
    delete editorView->level;
  }
  editorView->level = LoadLevel(newfile);
  editorView->redraw();
  TileSelector::tileSize = editorView->level->tileSize;
  tilesetUI->load_image("tileset_1616.png");
  BrowserLayer->clear();
  for(int i=0; i < editorView->level->layer.size();i++) {
    BrowserLayer->add(editorView->level->layer[i].name.c_str());
  }
  BrowserLayer->add("foreground");}
            xywh {0 0 100 20}
          }
          MenuItem menuSave {
            label Save
            callback {SaveLevel(editorView->level,"backup.json");}
            xywh {0 0 100 20}
          }
          MenuItem menuSaveAs {
            label {Save As}
            callback {//save as
 char *newfile = fl_file_chooser("Save as?", "*.json", filename);
 if(newfile){
   SaveLevel(editorView->level,newfile);
 }}
            xywh {0 0 100 20}
          }
        }
      }
      Fl_Group {} {open
        xywh {-10 25 335 780}
      } {
        Fl_Tabs {} {open
          xywh {5 315 310 400}
        } {
          Fl_Group {} {
            label Tileset open
            xywh {5 340 310 375} box GLEAM_DOWN_FRAME hide
          } {
            Fl_Box tilesetUI {
              xywh {10 345 300 365} color 44 selection_color 45 align 581
              code0 {\#include "tilesetUI.h"}
              class TilesetUI
            }
          }
          Fl_Group {} {
            label GameObjects open
            xywh {5 340 310 375}
          } {}
        }
        Fl_Browser BrowserLayer {
          xywh {5 80 310 170} type Hold
        }
        Fl_Group {} {open
          xywh {5 30 310 40} box THIN_UP_BOX
        } {
          Fl_Button btnPencil {
            image {icons/pencil.png} xywh {10 35 45 30}
          }
          Fl_Button btnEraser {
            callback {TileSelector::tileId = -1;}
            image {icons/eraser.png} xywh {65 35 45 30}
          }
          Fl_Button btnCopy {
            tooltip {Copy block of tiles} image {icons/copy.png} xywh {120 35 45 30} shortcut 0x40063
          }
          Fl_Button btnPaste {
            tooltip Paste image {icons/paste.png} xywh {175 35 45 30} shortcut 0x40076
          }
          Fl_Button btnSelect {selected
            tooltip {Selection Tool} image {icons/selection.png} xywh {230 35 45 30}
          }
        }
      }
    }
  }
  Function {show(int argc, char **argv)} {open
  } {
    code {mainWindow->show(argc,argv);} {}
  }
  decl {char* filename} {protected local
  }
  Function {loadTileset(const char* file)} {open
  } {
    code {if (file != NULL) {
        Fl_Image *img = nullptr;

        // Determine the file extension and load the image accordingly
        std::string filename = file;
        if (filename.find(".bmp") != std::string::npos) {
            img = new Fl_BMP_Image(file);  // Load BMP image
        } else if (filename.find(".png") != std::string::npos) {
            img = new Fl_PNG_Image(file);  // Load PNG image
        } else if (filename.find(".jpg") != std::string::npos || filename.find(".jpeg") != std::string::npos) {
            img = new Fl_JPEG_Image(file); // Load JPEG image
        }

        // Check if the image is valid and set it to the box
        if (img && img->w() > 0 && img->h() > 0) {
            tilesetUI->image(img);               // Set the image in the box
            tilesetUI->redraw();                 // Redraw the box to show the image
        } else {
            delete img;                    // Clean up if the image was invalid
            fl_alert("Invalid Image file!");
        }
    }} {}
  }
}
